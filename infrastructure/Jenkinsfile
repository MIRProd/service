pipeline {
    agent any
    environment {
        DOCKER_CREDS = credentials("docker-credentials")
        GITHUB_TOKEN = credentials("github-token")
    }

    tools {
        jdk 'jdk21'
    }

    stages {
        stage('Build & Test') {
            steps {
                sh './gradlew clean build'
            }
        }

        stage('Generate Tag Info') {
            steps {
                script {
                    echo "Fetching tags from remote..."
                    sh "git fetch --tags"

                    echo "Tags found after fetch:"
                    sh "git tag"  

                    //def lastTag = sh(script: "git tag | sort --version-sort | tail -1", returnStdout: true).trim()
                    def lastTag = sh(script: "git tag | grep -E '^[0-9]+\\.[0-9]+\\.[0-9]+$' | sort --version-sort | tail -1", returnStdout: true).trim()

                    echo "Last tag: ${lastTag}"

                    def major = "0", minor = "0", patch = "0", nextMinor = "1"

                    if (lastTag ==~ /^[0-9]+\.[0-9]+\.[0-9]+$/) {
                        def parts = lastTag.tokenize(".")
                        major = parts[0]
                        minor = parts[1]
                        patch = parts[2]

                        if (minor.isInteger()) {
                            nextMinor = (minor.toInteger() + 1).toString()
                        } else {
                            echo "Minor is not integer, defaulting to 1"
                        }
                    } else {
                        echo "Invalid or missing tag. Using default version 0.1.0"
                    }

                    env.MAJOR_VERSION = major
                    env.MINOR_VERSION = nextMinor
                    env.PATCH_VERSION = patch
                    env.IMAGE_TAG = "${major}.${nextMinor}.${patch}"

                    echo "Generated tag: ${env.IMAGE_TAG}"

            // Set the tag in the environment variable for later use       
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${DOCKER_CREDS_USR}/hello-img:${env.IMAGE_TAG} ."
            }
        }

        stage('Docker Login') {
            steps {
                sh """
                    echo \$DOCKER_CREDS_PSW | docker login -u \$DOCKER_CREDS_USR --password-stdin
                """
            }
        }

        stage('Push Image') {
            steps {
                script {
                    echo "Pushing image ${DOCKER_CREDS_USR}/hello-img:${env.IMAGE_TAG}"
                    sh "docker push ${DOCKER_CREDS_USR}/hello-img:${env.IMAGE_TAG}"

                    // Create and push git tag
                    sh "git tag ${env.IMAGE_TAG}"
                    sh "git push https://${GITHUB_TOKEN}@github.com/MIRProd/service.git ${env.IMAGE_TAG}"
                }
            }
        }
        stage('Start Services') {
            steps {
                script {
                    echo "Starting services with IMAGE_TAG=${env.IMAGE_TAG}"
                    sh """
                        IMAGE_TAG=${env.IMAGE_TAG} docker compose up -d hello mongo
                    """
                }
            }
        }
        stage('Integration Tests') {
            steps {
                sh './gradlew testIT'
            }
        }

    }
}
