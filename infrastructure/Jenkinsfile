pipeline {
    agent any
    environment {
        DOCKER_CREDS = credentials("docker-credentials")
        GITHUB_TOKEN = credentials("github-token")
    }

    tools {
        jdk 'jdk21'
    }

    stages {
        stage('Build & Test') {
            steps {
                sh './gradlew clean build'
            }
        }

        stage('Generate Tag Info') {
    steps {
        script {
            sh "git fetch --tags"

            def latestTag = sh(
    script: '''
        git tag | grep -E '^[0-9]+\\.[0-9]+\\.[0-9]+$' | sort --version-sort | tail -1
    ''',
    returnStdout: true
).trim()

            if (!latestTag) {
                echo "No tags found, using default 0.0.0"
                latestTag = "0.0.0"
            }

            def (major, minor, patch) = latestTag.tokenize('.')

            def nextMinor = (minor.toInteger() + 1).toString()

            env.MAJOR_VERSION = major
            env.MINOR_VERSION = nextMinor
            env.PATCH_VERSION = patch
            env.IMAGE_TAG = "${major}.${nextMinor}.${patch}"

            echo "Generated tag: ${env.IMAGE_TAG}"
        }
    }
}



        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${DOCKER_CREDS_USR}/hello-img:${env.IMAGE_TAG} ."
            }
        }

        stage('Docker Login') {
            steps {
                sh """
                    echo \$DOCKER_CREDS_PSW | docker login -u \$DOCKER_CREDS_USR --password-stdin
                """
            }
        }

        stage('Push Image') {
            steps {
                script {
                    echo "Pushing image ${DOCKER_CREDS_USR}/hello-img:${env.IMAGE_TAG}"
                    sh "docker push ${DOCKER_CREDS_USR}/hello-img:${env.IMAGE_TAG}"

                    // Create and push git tag
                    sh "git tag ${env.IMAGE_TAG}"
                    sh "git push https://${GITHUB_TOKEN}@github.com/MIRProd/service.git ${env.IMAGE_TAG}"
                }
            }
        }
        stage('Start Services') {
            steps {
                script {
                    echo "Starting services with IMAGE_TAG=${env.IMAGE_TAG}"
                    sh """
                        export IMAGE_TAG=${env.IMAGE_TAG} 
                        docker compose up -d hello mongo
                    """
                }
            }
        }
        stage('Integration Tests') {
            steps {
                sh './gradlew testIT'
            }
        }

    }
}