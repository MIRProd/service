pipeline {
    agent any
    environment {
        DOCKER_CREDS = credentials("docker-credentials")
    }

    tools {
        jdk 'jdk21'
    }

    stages {
        stage('Build & Test') {
            steps {
                sh './gradlew clean build'
            }
        }

        stage('Generate Tag Info') {
            steps {
                script {
                    sh "git fetch --tags"
                    def major = sh(script: "git tag | sort --version-sort | tail -1 | cut -d . -f 1", returnStdout: true).trim()
                    def minor = sh(script: "git tag | sort --version-sort | tail -1 | cut -d . -f 2", returnStdout: true).trim()
                    def patch = sh(script: "git tag | sort --version-sort | tail -1 | cut -d . -f 3", returnStdout: true).trim()

                    def nextMinor = (minor.toInteger() + 1).toString()

                    env.MAJOR_VERSION = major
                    env.MINOR_VERSION = nextMinor
                    env.PATCH_VERSION = patch
                    env.IMAGE_TAG = "${major}.${nextMinor}.${patch}"

                    echo "Generated tag: ${env.IMAGE_TAG}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${DOCKER_CREDS_USR}/hello-img:${env.IMAGE_TAG} ."
            }
        }

        stage('Docker Login') {
            steps {
                sh """
                    echo \$DOCKER_CREDS_PSW | docker login -u \$DOCKER_CREDS_USR --password-stdin
                """
            }
        }

        stage('Push Image') {
            steps {
                script {
                    echo "Pushing image ${DOCKER_CREDS_USR}/hello-img:${env.IMAGE_TAG}"
                    sh "docker push ${DOCKER_CREDS_USR}/hello-img:${env.IMAGE_TAG}"

                    // Create and push git tag
                    sh "git tag ${env.IMAGE_TAG}"
                    withCredentials([usernamePassword(
                        credentialsId: 'github-token',
                        usernameVariable: 'GIT_USER',
                        passwordVariable: 'GIT_TOKEN'
                    )]) {
                        sh '''
                            git config --global url."https://${GIT_USER}:${GIT_TOKEN}@github.com".insteadOf "https://github.com"
                            git push origin ${env.IMAGE_TAG}
                        '''
                    }
                }
            }
        }

        stage('Start Services') {
            steps {
                script {
                    echo "Starting services with IMAGE_TAG=${env.IMAGE_TAG}"
                    sh """
                        IMAGE_TAG=${env.IMAGE_TAG} docker compose up -d hello mongo
                    """
                }
            }
        }

        stage('Integration Tests') {
            steps {
                sh './gradlew testIT'
            }
        }
    }
}