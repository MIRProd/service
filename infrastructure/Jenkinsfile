pipeline {
    agent any
    environment {
        DOCKER_CREDS = credentials("docker-credentials")
    }

    stages {
        stage('Build & Test') {
            steps {
                sh './gradlew clean build'
            }
        }

        stage('Tag image') {
            steps {
                script {
                    // Definim variabile locale
                    def tagInfo = getVersionInfo()
                    
                    // Folosim variabilele direct în acest scope
                    echo "GIT_TAG: ${tagInfo.GIT_TAG}, Version: ${tagInfo.MAJOR}.${tagInfo.MINOR}.${tagInfo.PATCH}"
                    sh "docker build -t ${DOCKER_CREDS_USR}/hello-img:${tagInfo.MAJOR}.${tagInfo.MINOR}.${tagInfo.PATCH} ."
                    
                    // Salvăm valorile necesare pentru etapele următoare
                    dockerImage = "${DOCKER_CREDS_USR}/hello-img:${tagInfo.MAJOR}.${tagInfo.MINOR}.${tagInfo.PATCH}"
                }
            }
        }

        stage('Docker Login') {
            steps {
                script {
                    // Folosim credentialele direct din environment
                    sh """
                        echo \$DOCKER_CREDS_PSW | docker login -u \$DOCKER_CREDS_USR --password-stdin
                    """
                }
            }
        }

        stage('Push Image') {
            steps {
                script {
                    echo "Pushing image ${dockerImage}"
                    sh "docker push ${dockerImage}"
                }
            }
        }
    }

    tools {
        jdk 'jdk21'
    }
}

// Funcție helper pentru versiuni (returnează un map)
def getVersionInfo() {
    def GIT_TAG = sh(script: 'git fetch --tags && git tag', returnStdout: true).trim()
    return [
        GIT_TAG: GIT_TAG,
        MAJOR: sh(script: 'git tag | cut -d . -f 1', returnStdout: true).trim(),
        MINOR: sh(script: 'git tag | cut -d . -f 2', returnStdout: true).trim(),
        PATCH: sh(script: 'git tag | cut -d . -f 3', returnStdout: true).trim()
    ]
}
